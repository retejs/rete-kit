import { NodeEditor, GetSchemes, ClassicPreset } from "rete";
/* [stack-angular] import { Injector } from '@angular/core' [/stack-angular] */
import { /* [import-area-extensions] AreaExtensions, [/import-area-extensions] */  AreaPlugin } from "rete-area-plugin";
import {
  ConnectionPlugin,
  Presets as ConnectionPresets
} from "rete-connection-plugin";
/* [stack-react] import { ReactPlugin, ReactArea2D, Presets as ReactPresets } from 'rete-react-plugin' [/stack-react] */
/* [react18] import { createRoot } from 'react-dom/client' [/react18] */
/* [stack-vue] import { VuePlugin, VueArea2D, Presets as VuePresets } from 'rete-vue-plugin/* [vue2] /vue2 [/vue2] */' [/stack-vue] */
/* [stack-angular] import { AngularPlugin, AngularArea2D, Presets as AngularPresets } from 'rete-angular-plugin/* [angular12] /12 [/angular12] *//* [angular13] /13 [/angular13] *//* [angular14] /14 [/angular14] *//* [angular15] /15 [/angular15] *//* [angular16] /16 [/angular16] *//* [angular17] /17 [/angular17] */' [/stack-angular] */
/* [stack-svelte] import { SveltePlugin, SvelteArea2D, Presets as SveltePresets } from 'rete-svelte-plugin' [/stack-svelte] */
/* [stack-react] import { CustomNode } from "../customization/CustomNode";
import { StyledNode } from "../customization/StyledNode";
import { CustomSocket } from "../customization/CustomSocket";
import { CustomConnection } from "../customization/CustomConnection"; [/stack-react] */
/* [stack-vue] import CustomNode from "../customization/CustomNode.vue";
import CustomConnection from "../customization/CustomConnection.vue";
import CustomSocket from "../customization/CustomSocket.vue"; [/stack-vue] */
/* [stack-angular] import { CustomSocketComponent } from "../customization/custom-socket/custom-socket.component";
import { CustomNodeComponent } from "../customization/custom-node/custom-node.component";
import { CustomConnectionComponent } from "../customization/custom-connection/custom-connection.component"; [/stack-angular] */
/* [stack-svelte]
import CustomNodeComponent from '../customization/CustomNode.svelte'
import CustomConnectionComponent from '../customization/CustomConnection.svelte'
import CustomSocketComponent from '../customization/CustomSocket.svelte' [/stack-svelte] */
import { addCustomBackground } from "../customization/custom-background";
/* [vue2]
import Vue from 'vue'
import VueI18n from 'vue-i18n'

Vue.use(VueI18n)

const i18n = new VueI18n({
[/vue2] */
/* [vue3]
import { createApp } from 'vue'
import { createI18n } from 'vue-i18n'

const i18n = createI18n({
[/vue3] */
/* [vue-render]
  locale: 'en',
  messages: {
    'en': {
      'Custom-test': 'Custom'
    }
  }
})
[/vue-render] */

type Schemes = GetSchemes<
  ClassicPreset.Node,
  ClassicPreset.Connection<ClassicPreset.Node, ClassicPreset.Node>
>;
type AreaExtra =
  /* [stack-react] | ReactArea2D<Schemes> [/stack-react] */
  /* [stack-vue] | VueArea2D<Schemes> [/stack-vue] */
  /* [stack-angular] | AngularArea2D<Schemes> [/stack-angular] */
  /* [stack-svelte] | SvelteArea2D<Schemes> [/stack-svelte] */

  const socket = new ClassicPreset.Socket("socket");

export async function createEditor(container: HTMLElement/* [stack-angular] , injector: Injector [/stack-angular] */) {
  const editor = new NodeEditor<Schemes>();
  const area = new AreaPlugin<Schemes, AreaExtra>(container);
  const connection = new ConnectionPlugin<Schemes, AreaExtra>();
  /* [stack-react] const reactRender = new ReactPlugin<Schemes, AreaExtra>(/* [react18] { createRoot } [/react18] */)[/stack-react] */
  /* [vue-render] const vueRender = new VuePlugin<Schemes, AreaExtra>({
    setup(context) {
      /* [vue2] Vue
      const app = new Vue({ ...context, i18n })
      [/vue2] */
      /* [vue3]
      const app = createApp(context)
      app.use(i18n)
      [/vue3] */
      console.log(app, context)
      return app
}
  })[/vue-render] */
  /* [stack-angular] const angularRender = new AngularPlugin<Schemes, AreaExtra>({ injector }) [/stack-angular] */
  /* [stack-svelte] const svelteRender = new SveltePlugin<Schemes, AreaExtra>() [/stack-svelte] */

  /* [selectable] AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {
    accumulating: AreaExtensions.accumulateOnCtrl()
  }); [/selectable] */

  /* [stack-react] reactRender.addPreset(
    ReactPresets.classic.setup({
      customize: {
        node(context) {
          if (context.payload.label === "Fully customized") {
            return CustomNode;
          }
          if (context.payload.label === "Override styles") {
            return StyledNode;
          }
          return ReactPresets.classic.Node;
        },
        socket() {
          return CustomSocket;
        },
        connection() {
          return CustomConnection;
        }
      }
    })
  ); [/stack-react] */

  /* [stack-vue] vueRender.addPreset(
    VuePresets.classic.setup({
      customize: {
        node(context) {
          if (context.payload.label === "Custom") {
            return CustomNode;
          }
          return VuePresets.classic.Node;
        },
        socket() {
          return CustomSocket;
        },
        connection() {
          return CustomConnection;
        }
      }
    })
  ); [/stack-vue] */

  /* [stack-angular]
  angularRender.addPreset(
    AngularPresets.classic.setup({
      customize: {
        node() {
          return CustomNodeComponent;
        },
        connection() {
          return CustomConnectionComponent;
        },
        socket() {
          return CustomSocketComponent;
        }
      }
    })
  ); [/stack-angular] */

  /* [stack-svelte]
  svelteRender.addPreset(
    SveltePresets.classic.setup({
      customize: {
        node() {
          return CustomNodeComponent as any;
        },
        connection() {
          return CustomConnectionComponent as any;
        },
        socket() {
          return CustomSocketComponent as any;
        }
      },
    })
  ); [/stack-svelte] */

  connection.addPreset(ConnectionPresets.classic.setup());

  addCustomBackground(area);

  editor.use(area);
  area.use(connection);
  /* [stack-react] area.use(reactRender) [/stack-react] */
  /* [stack-vue] area.use(vueRender) [/stack-vue] */
  /* [stack-angular] area.use(angularRender) [/stack-angular] */
  /* [stack-svelte] area.use(svelteRender) [/stack-svelte] */

  /* [order-nodes] AreaExtensions.simpleNodesOrder(area); [/order-nodes] */

  /* [stack-react] const aLabel = "Override styles";
  const bLabel = "Fully customized"; [/stack-react] */
  /* [!stack-react] const aLabel = "Custom";
  const bLabel = "Custom"; [/!stack-react] */

  const a = new ClassicPreset.Node(aLabel);
a.addOutput("a", new ClassicPreset.Output(socket));
a.addInput("a", new ClassicPreset.Input(socket));
await editor.addNode(a);

const b = new ClassicPreset.Node(bLabel);
b.addOutput("a", new ClassicPreset.Output(socket));
b.addInput("a", new ClassicPreset.Input(socket));
await editor.addNode(b);

await area.translate(a.id, { x: 0, y: 0 });
await area.translate(b.id, { x: 300, y: 0 });

await editor.addConnection(new ClassicPreset.Connection(a, "a", b, "a"));

/* [zoom-at] setTimeout(() => {
  AreaExtensions.zoomAt(area, editor.getNodes());
}, 300); [/zoom-at] */

return {
  destroy: () => area.destroy()
};
}
